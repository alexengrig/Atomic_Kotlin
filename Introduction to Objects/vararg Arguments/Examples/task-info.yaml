type: theory
files:
- name: src/ListOf.kt
  visible: true
  text: |-
    // Varargs/ListOf.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      listOf(1) eq "[1]"
      listOf("a", "b") eq "[a, b]"
    }
  learner_created: false
- name: src/VariableArgLists.kt
  visible: true
  text: |-
    // Varargs/VariableArgLists.kt

    fun v(s: String, vararg d: Double) {}

    fun main(args: Array<String>) {
      v("abc", 1.0, 2.0, 3.0, 4.0)
    }
  learner_created: false
- name: src/VarargSum.kt
  visible: true
  text: |-
    // Varargs/VarargSum.kt
    import atomictest.eq

    fun sum(vararg numbers: Int): Int {
      var total = 0
      for (n in numbers)
        total += n
      return total
    }

    fun main(args: Array<String>) {
      sum(13, 27, 44) eq 84
      sum(1, 3, 5, 7, 9, 11) eq 36
      sum() eq 0
    }
  learner_created: false
- name: src/VarargLikeList.kt
  visible: true
  text: |-
    // Varargs/VarargLikeList.kt

    fun checkOperations(vararg ints: Int) {
      println("Size: ${ints.size}")
      println("Sum: ${ints.sum()}")
      println("Min: ${ints.min()}")
      println("Max: ${ints.max()}")
      println("Average: ${ints.average()}")
    }

    fun main(args: Array<String>) {
      checkOperations(10, -3, 8, 1, 9)
    }
    /* Output:
    Size: 5
    Sum: 25
    Min: -3
    Max: 10
    Average: 5.0
    */
  learner_created: false
- name: src/SpreadOperator.kt
  visible: true
  text: |-
    // Varargs/SpreadOperator.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val array = intArrayOf(4, 5)
      sum(1, 2, 3, *array, 6) eq 21  // [1]
      // Won't compile:
      // sum(1, 2, 3, array, 6)

      val list = listOf(9, 10, 11)
      sum(*list.toIntArray()) eq 30  // [2]
    }
  learner_created: false
- name: src/TwoFunctionsWithVarargs.kt
  visible: true
  text: |-
    // Varargs/TwoFunctionsWithVarargs.kt

    fun first(vararg numbers: Int) {
      for (i in numbers) {
        print("[$i]")
      }
    }

    fun second(vararg numbers: Int) =
      first(*numbers)

    fun main(args: Array<String>) {
      second(7, 9, 32)
    }
    /* Output:
    [7][9][32]
    */
  learner_created: false
status: Unchecked
record: -1

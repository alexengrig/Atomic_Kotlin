type: theory
files:
- name: src/ToIntException.kt
  visible: true
  text: |-
    // Exceptions/ToIntException.kt

    fun erroneousCode() {
      // Uncomment this line to get an exception:
      // val i = "1$".toInt()        // [1]
    }

    fun main(args: Array<String>) {
      erroneousCode()
    }
  learner_created: false
- name: src/IntroducingCapture.kt
  visible: true
  text: |-
    // Exceptions/IntroducingCapture.kt
    import atomictest.*

    fun main(args: Array<String>) {
      capture {
        "1$".toInt()
      } eq "NumberFormatException: " +
        """For input string: "1$""""
    }
  learner_created: false
- name: src/IntroducingNull.kt
  visible: true
  text: |-
    // Exceptions/IntroducingNull.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      "1$".toIntOrNull() eq null
    }
  learner_created: false
- name: src/AverageIncome.kt
  visible: true
  text: |-
    // Exceptions/AverageIncome.kt
    package firstversion
    import atomictest.*

    fun averageIncome(income: Int, months: Int) =
      income / months

    fun main(args: Array<String>) {
      averageIncome(3300, 3) eq 1100
      capture {
        averageIncome(5000, 0)
      } eq "ArithmeticException: / by zero"
    }
  learner_created: false
- name: src/AverageIncomeWithNull.kt
  visible: true
  text: |-
    // Exceptions/AverageIncomeWithNull.kt
    package withnull
    import atomictest.eq

    fun averageIncome(income: Int, months: Int) =
      if (months == 0)
        null
      else
        income / months

    fun main(args: Array<String>) {
      averageIncome(3300, 3) eq 1100
      averageIncome(5000, 0) eq null
    }
  learner_created: false
- name: src/AverageIncomeWithException.kt
  visible: true
  text: |-
    // Exceptions/AverageIncomeWithException.kt
    package properexception
    import atomictest.*

    fun averageIncome(income: Int, months: Int) =
      if (months == 0)
        throw IllegalArgumentException(    // [1]
          "Months can't be zero")
      else
        income / months

    fun main(args: Array<String>) {
      averageIncome(3300, 3) eq 1100
      capture {
        averageIncome(5000, 0)
      } eq "IllegalArgumentException: " +
        "Months can't be zero"
    }
  learner_created: false
status: Unchecked
record: -1

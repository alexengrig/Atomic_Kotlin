type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 0
    length: 8
    placeholder_text: /*TODO*/
    initial_state:
      length: 8
      offset: 0
    initialized_from_dependency: false
    possible_answer: |-
      package pythagorean

      import kotlin.math.sqrt

      class EquilateralTriangle(val side: Double) {
          fun area() = sqrt(3.0) / 4 * side * side
      }
    selected: false
    status: Unchecked
  text: /*TODO*/
  learner_created: false
- name: src/Main.kt
  visible: true
  text: |-
    package importsandPackages1

    /*
    import pythagorean.EquilateralTriangle

    fun main(args: Array<String>) {
        val et = EquilateralTriangle(1.0)
        println(et.area())
    }
    */
    /* Output:
    0.4330127018922193
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package importsandPackages1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import kotlin.math.sqrt

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestEquilateralTriangle {
        private fun checkArea(side: Double) {
            val triangleClass = ClassLoader.getSystemClassLoader().loadClass("pythagorean.EquilateralTriangle")
            val constructors = triangleClass.constructors
            if (constructors.isEmpty()) {
                throw AssertionError("The class EquilateralTriangle should have a constructor")
            }
            val constructor = constructors[0]
            val et = constructor.newInstance(side)
            val expected = sqrt(3.0) / 4 * side * side

            val areaMethod = triangleClass.getMethod("area")
            val areaResult = areaMethod.invoke(et) as? Double
                    ?: throw AssertionError("area member function should return Double as a result")
            Assert.assertEquals("Wrong result for side $side", expected, areaResult, 0.00000000000001)
        }

        @Test
        fun testArea1() = checkArea(1.0)

        @Test
        fun testArea2() = checkArea(2.0)

        @Test
        fun testArea3() = checkArea(3.0)

        @Test
        fun testArea4() = checkArea(4.0)
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Imports+%26+Packages+%2F+Exercise1
status: Unchecked
record: -1

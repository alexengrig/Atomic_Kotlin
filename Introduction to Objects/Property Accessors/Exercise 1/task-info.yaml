type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 414
    length: 8
    placeholder_text: /*TODO*/
    initial_state:
      length: 8
      offset: 414
    initialized_from_dependency: false
    possible_answer: |-
      val isEmpty: Boolean
              get() = hamsters.isEmpty()
    selected: false
    status: Unchecked
  text: |-
    package propertyAccessors1

    import atomictest.eq

    class Hamster(val name: String) {
        override fun toString(): String {
            return "Hamster('$name')"
        }
    }

    class Cage(private val maxCapacity: Int) {
        private val hamsters =
                mutableListOf<Hamster>()

        val capacity: Int
            get() = maxCapacity - hamsters.size

        val isFull: Boolean
            get() = hamsters.size == maxCapacity

        /*TODO*/

        fun put(hamster: Hamster): Boolean =
                if(isFull)
                    false
                else {
                    hamsters += hamster
                    true
                }

        fun takeHamster(): Hamster =
                hamsters.removeAt(0)
    }

    /*
    fun main(args: Array<String>) {
        val cage = Cage(2)
        cage.isEmpty eq true
        cage.put(Hamster("Alice"))
        cage.isEmpty eq false
    }*/
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package propertyAccessors1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestEmptiness {
        @Test
        fun testSample() {
            val cage = Cage(2)
            Assert.assertTrue("'cage.isEmpty' should return 'true' for an empty cage", cage.isEmpty)
            cage.put(Hamster("Alice"))
            Assert.assertFalse("'cage.isEmpty' should return 'false' for a non-empty cage", cage.isEmpty)
        }

        @Test
        fun testTwoHamsters() {
            val cage = Cage(3)
            Assert.assertTrue("'cage.isEmpty' should return 'true' for an empty cage", cage.isEmpty)
            cage.put(Hamster("Alice"))
            cage.put(Hamster("Bob"))
            Assert.assertFalse("'cage.isEmpty' should return 'false' for a non-empty cage", cage.isEmpty)
        }

        @Test
        fun testRemoval() {
            val cage = Cage(3)
            Assert.assertTrue("'cage.isEmpty' should return 'true' for an empty cage", cage.isEmpty)
            cage.put(Hamster("Alice"))
            cage.takeHamster()
            Assert.assertTrue("'cage.isEmpty' should return 'true' for an empty cage", cage.isEmpty)
        }
    }

    val Cage.isEmpty get() = false
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Property+Accessors+%2F+Exercise1
status: Unchecked
record: -1

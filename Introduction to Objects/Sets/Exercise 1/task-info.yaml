type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 224
    length: 0
    placeholder_text: ""
    initial_state:
      length: 0
      offset: 224
    initialized_from_dependency: false
    possible_answer: |2

      private fun getPercentage(productsCart: Set<String>, groceryCart: Set<String>) =
              100.0 * (productsCart intersect groceryCart).size / groceryCart.size
    selected: false
    status: Unchecked
  - offset: 276
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 276
    initialized_from_dependency: false
    possible_answer: getPercentage(meats, groceryCart)
    selected: false
    status: Unchecked
  - offset: 336
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 336
    initialized_from_dependency: false
    possible_answer: getPercentage(fruits, groceryCart)
    selected: false
    status: Unchecked
  - offset: 398
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 398
    initialized_from_dependency: false
    possible_answer: getPercentage(vegetables, groceryCart)
    selected: false
    status: Unchecked
  - offset: 458
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 458
    initialized_from_dependency: false
    possible_answer: 100.0 * (groceryCart - meats - fruits - vegetables).size / groceryCart.size
    selected: false
    status: Unchecked
  text: |-
    package sets1

    import atomictest.eq

    val meats = setOf("beef", "chicken")
    val fruits = setOf("apple", "orange", "banana", "kiwi")
    val vegetables = setOf("beans", "peas", "carrots", "sweet potatoes", "asparagus", "spinach")

    fun percentMeat(groceryCart: Set<String>): Double = TODO()
    fun percentFruit(groceryCart: Set<String>): Double = TODO()
    fun percentVeggies(groceryCart: Set<String>): Double = TODO()
    fun percentOther(groceryCart: Set<String>): Double = TODO()

    fun main(args: Array<String>) {
        val groceryCart = setOf("apple", "pretzels", "bread", "orange", "beef",
                "beans", "asparagus", "sweet potatoes", "spinach", "carrots")

        percentMeat(groceryCart) eq 10.0
        percentFruit(groceryCart) eq 20.0
        percentVeggies(groceryCart) eq 50.0
        percentOther(groceryCart) eq 20.0
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package sets1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestGroceryCart {
        private fun checkPercentage(
                percentage: Double,
                groceryCart: Set<String>,
                percentFunction: (Set<String>) -> Double,
                functionName: String
        ) {
            Assert.assertEquals("$functionName is wrong for $groceryCart", percentage, percentFunction(groceryCart), 0.000000001)
        }

        private fun checkMeatPercentage(percentage: Double, groceryCart: Set<String>) {
            checkPercentage(percentage, groceryCart, ::percentMeat, "percentMeat")
        }

        private fun checkFruitPercentage(percentage: Double, groceryCart: Set<String>) {
            checkPercentage(percentage, groceryCart, ::percentFruit, "percentFruit")
        }

        private fun checkVeggiesPercentage(percentage: Double, groceryCart: Set<String>) {
            checkPercentage(percentage, groceryCart, ::percentVeggies, "percentVeggies")
        }

        private fun checkOtherPercentage(percentage: Double, groceryCart: Set<String>) {
            checkPercentage(percentage, groceryCart, ::percentOther, "percentOther")
        }

        @Test
        fun test1Sample() {
            val groceryCart = setOf("apple", "pretzels", "bread", "orange", "beef",
                    "beans", "asparagus", "sweet potatoes", "spinach", "carrots")

            checkMeatPercentage(10.0, groceryCart)
            checkFruitPercentage(20.0, groceryCart)
            checkVeggiesPercentage(50.0, groceryCart)
            checkOtherPercentage(20.0, groceryCart)
        }

        @Test
        fun test2Trivial() {
            val groceryCart = setOf("beef", "apple", "beans", "vodka")

            checkMeatPercentage(25.0, groceryCart)
            checkFruitPercentage(25.0, groceryCart)
            checkVeggiesPercentage(25.0, groceryCart)
            checkOtherPercentage(25.0, groceryCart)
        }

        @Test
        fun test3Another() {
            val groceryCart = setOf("apple", "orange", "kiwi",
                    "sweet potatoes", "asparagus", "spinach", "buckwheat", "condensed milk")
            checkMeatPercentage(0.0, groceryCart)
            checkFruitPercentage(37.5, groceryCart)
            checkVeggiesPercentage(37.5, groceryCart)
            checkOtherPercentage(25.0, groceryCart)
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Sets+%2F+Exercise1
status: Unchecked
record: -1

type: theory
files:
- name: src/Sets.kt
  visible: true
  text: |-
    // Sets/Sets.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val intSet = setOf(1, 1, 2, 3, 9, 9, 4)
      // No duplicates:
      intSet eq setOf(1, 2, 3, 4, 9)

      // Element order is unimportant:
      setOf(1, 2) eq setOf(2, 1)

      // Set membership:
      (9 in intSet) eq true
      (99 in intSet) eq false

      intSet.contains(9) eq true
      intSet.contains(99) eq false

      // Does this set contain another set?
      intSet.containsAll(setOf(1, 9, 2)) eq true

      // Set union:
      intSet.union(setOf(3, 4, 5, 6)) eq
        setOf(1, 2, 3, 4, 5, 6, 9)

      // Set intersection:
      intSet intersect setOf(0, 1, 2, 7, 8) eq
        setOf(1, 2)

      // Set difference:
      intSet subtract setOf(0, 1, 9, 10) eq
        setOf(2, 3, 4)
      intSet - setOf(0, 1, 9, 10) eq
        setOf(2, 3, 4)
    }
  learner_created: false
- name: src/RemoveDuplicates.kt
  visible: true
  text: |-
    // Sets/RemoveDuplicates.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val list = listOf(3, 3, 2, 1, 2)
      list.toSet() eq setOf(1, 2, 3)
      list.distinct() eq listOf(3, 2, 1)

      "abbcc".toSet() eq setOf('a', 'b', 'c')
    }
  learner_created: false
- name: src/MutableSet.kt
  visible: true
  text: |-
    // Sets/MutableSet.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val mutableSet = mutableSetOf<Int>()
      mutableSet += 42
      mutableSet += 42
      mutableSet eq setOf(42)
      mutableSet -= 42
      mutableSet eq setOf<Int>()
    }
  learner_created: false
status: Unchecked
record: -1

type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 45
    length: 8
    placeholder_text: /*TODO*/
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 1
      is_visible: true
    initial_state:
      length: 8
      offset: 45
    initialized_from_dependency: false
    possible_answer: |2

              private val fieldSize: Int,
              private var x: Int,
              private var y: Int
    selected: false
    status: Unchecked
  - offset: 57
    length: 0
    placeholder_text: ""
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 2
      is_visible: true
    initial_state:
      length: 0
      offset: 57
    initialized_from_dependency: false
    possible_answer: |2+
          private fun crossBoundary(coordinate: Int): Int {
              val inBounds = coordinate % fieldSize
              return if (inBounds < 0) {
                  fieldSize + inBounds
              } else {
                  inBounds
              }
          }

          private fun checkSteps(steps: Int): Boolean {
              if (steps <= 0) {
                  println("Incorrect input: $steps, the number of steps should be positive.")
                  return true
              }
              return false
          }

    selected: false
    status: Unchecked
  - offset: 96
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 3
      is_visible: true
    initial_state:
      length: 6
      offset: 96
    initialized_from_dependency: false
    possible_answer: |-
      if (checkSteps(steps)) return
              x += steps
              x = crossBoundary(x)
    selected: false
    status: Unchecked
  - offset: 147
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 4
      is_visible: true
    initial_state:
      length: 6
      offset: 147
    initialized_from_dependency: false
    possible_answer: |-
      if (checkSteps(steps)) return
              x -= steps
              x = crossBoundary(x)
    selected: false
    status: Unchecked
  - offset: 198
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 5
      is_visible: true
    initial_state:
      length: 6
      offset: 198
    initialized_from_dependency: false
    possible_answer: |-
      if (checkSteps(steps)) return
              y += steps
              y = crossBoundary(y)
    selected: false
    status: Unchecked
  - offset: 247
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 6
      is_visible: true
    initial_state:
      length: 6
      offset: 247
    initialized_from_dependency: false
    possible_answer: |-
      if (checkSteps(steps)) return
              y -= steps
              y = crossBoundary(y)
    selected: false
    status: Unchecked
  - offset: 293
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 7
      is_visible: true
    initial_state:
      length: 6
      offset: 293
    initialized_from_dependency: false
    possible_answer: '"($x,$y)"'
    selected: false
    status: Unchecked
  - offset: 305
    length: 8
    placeholder_text: /*TODO*/
    dependency:
      section: Introduction to Objects
      lesson: Constraining Visibility
      task: Exercise 1
      file: src/Task.kt
      placeholder: 8
      is_visible: true
    initial_state:
      length: 8
      offset: 305
    initialized_from_dependency: false
    possible_answer: override fun toString() = "Robot(x=$x,y=$y)"
    selected: false
    status: Unchecked
  text: |-
    package constrainingVisibility2

    class Robot(/*TODO*/) {

        fun goRight(steps: Int) {
            TODO()
        }

        fun goLeft(steps: Int) {
            TODO()
        }

        fun goDown(steps: Int) {
            TODO()
        }

        fun goUp(steps: Int) {
            TODO()
        }

        fun getLocation(): String = TODO()

        /*TODO*/
    }

    /*
    fun main(args: Array<String>) {
        val robot = Robot(10, 1, 1)
        robot.goRight(-1)
    }
    */
    /* Output:
    Incorrect input: -1, the number of steps should be positive.
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package constrainingVisibility2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import java.io.ByteArrayOutputStream
    import java.io.PrintStream

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestRobotIncorrectInput {
        class RobotHandler() {
            val robot: Robot = Robot(10, 0, 0)
            val loggedMovements = StringBuilder()
            var loggedSteps: Int? = null

            fun goRight(steps: Int) {
                robot.goRight(steps)
                loggedMovements.appendln("goRight($steps)")
                loggedSteps = steps
            }

            fun goLeft(steps: Int) {
                robot.goLeft(steps)
                loggedMovements.appendln("goLeft($steps)")
                loggedSteps = steps
            }

            fun goDown(steps: Int) {
                robot.goDown(steps)
                loggedMovements.appendln("goDown($steps)")
                loggedSteps = steps
            }

            fun goUp(steps: Int) {
                robot.goUp(steps)
                loggedMovements.appendln("goUp($steps)")
                loggedSteps = steps
            }
        }

        private fun getErrorMessageText(steps: Int?) =
                "Incorrect input: $steps, the number of steps should be positive."

        private fun testWrongArgumentOutput(movements: RobotHandler.() -> Unit) {
            val byteArrayOutputStream = ByteArrayOutputStream()
            System.setOut(PrintStream(byteArrayOutputStream))

            val robotHandler = RobotHandler()
            robotHandler.movements()

            val steps = robotHandler.loggedSteps
            val incorrectOutput = "Incorrect output after:\n" + robotHandler.loggedMovements
            if (byteArrayOutputStream.toString().isEmpty()) {
                throw AssertionError(incorrectOutput + "\nThe message " +
                        "\"${getErrorMessageText(steps)}\" should be printed to the console")
            }
            Assert.assertEquals(incorrectOutput,
                    "${getErrorMessageText(steps)}\n",
                    byteArrayOutputStream.toString())
        }


        @Test
        fun test1Right() = testWrongArgumentOutput {
            goRight(-5)
        }

        @Test
        fun test2Left() = testWrongArgumentOutput {
            goLeft(0)
        }

        @Test
        fun test3Up() = testWrongArgumentOutput {
            goUp(-10)
        }

        @Test
        fun test4Down() = testWrongArgumentOutput {
            goDown(-50)
        }
    }

    fun Robot(vararg a: Any?): Robot = TODO()
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise2
status: Unchecked
record: -1

type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 45
    length: 8
    placeholder_text: /*TODO*/
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 1
      is_visible: true
    initial_state:
      length: 8
      offset: 45
    initialized_from_dependency: false
    possible_answer: |2

              private val fieldSize: Int,
              private var x: Int,
              private var y: Int
    selected: false
    status: Unchecked
  - offset: 57
    length: 0
    placeholder_text: ""
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 2
      is_visible: true
    initial_state:
      length: 0
      offset: 57
    initialized_from_dependency: false
    possible_answer: |2
          private fun crossBoundary(coordinate: Int): Int {
              val inBounds = coordinate % fieldSize
              return if (inBounds < 0) {
                  fieldSize + inBounds
              } else {
                  inBounds
              }
          }
    selected: false
    status: Unchecked
  - offset: 96
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 3
      is_visible: true
    initial_state:
      length: 6
      offset: 96
    initialized_from_dependency: false
    possible_answer: |-
      x += steps
              x = crossBoundary(x)
    selected: false
    status: Unchecked
  - offset: 147
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 4
      is_visible: true
    initial_state:
      length: 6
      offset: 147
    initialized_from_dependency: false
    possible_answer: |-
      x -= steps
              x = crossBoundary(x)
    selected: false
    status: Unchecked
  - offset: 198
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 5
      is_visible: true
    initial_state:
      length: 6
      offset: 198
    initialized_from_dependency: false
    possible_answer: |-
      y += steps
              y = crossBoundary(y)
    selected: false
    status: Unchecked
  - offset: 247
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 6
      is_visible: true
    initial_state:
      length: 6
      offset: 247
    initialized_from_dependency: false
    possible_answer: |-
      y -= steps
              y = crossBoundary(y)
    selected: false
    status: Unchecked
  - offset: 293
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 7
      is_visible: true
    initial_state:
      length: 6
      offset: 293
    initialized_from_dependency: false
    possible_answer: '"($x,$y)"'
    selected: false
    status: Unchecked
  - offset: 305
    length: 8
    placeholder_text: /*TODO*/
    dependency:
      section: Introduction to Objects
      lesson: Constructors
      task: Exercise 2
      file: src/Task.kt
      placeholder: 8
      is_visible: true
    initial_state:
      length: 8
      offset: 305
    initialized_from_dependency: false
    possible_answer: override fun toString() = "Robot(x=$x,y=$y)"
    selected: false
    status: Unchecked
  text: |-
    package constrainingVisibility1

    class Robot(/*TODO*/) {

        fun goRight(steps: Int) {
            TODO()
        }

        fun goLeft(steps: Int) {
            TODO()
        }

        fun goDown(steps: Int) {
            TODO()
        }

        fun goUp(steps: Int) {
            TODO()
        }

        fun getLocation(): String = TODO()

        /*TODO*/
    }

    /*
    fun main(args: Array<String>) {
        val robot = Robot(10, 1, 1)
        // Coordinates should be private:
    //    println(robot.x)
    }
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package constrainingVisibility1

    import org.junit.Assert
    import org.junit.Test

    class TestRobotPrivateMembers {
        @Test
        fun testCheckAllThePropertiesArePrivate() {
            val robotMethods = setOf("goRight", "goLeft", "goDown", "goUp", "getLocation")
            val objectMethods = setOf("wait", "equals", "toString", "hashCode", "getClass", "notify", "notifyAll")
            val publicMethods = robotMethods + objectMethods

            val robotClass = Robot::class.java
            val otherMethods = robotClass.methods.filter { it.name !in publicMethods }.map { it.name }

            val (getters, methods) = otherMethods
                    .filterNot { it.startsWith("set") }
                    .partition { it.startsWith("get") }
            val properties = getters.map { it.substringAfter("get").decapitalize() }
            val message = buildString {
                properties.forEach {
                    appendln("The property '$it' should be private")
                }
                methods.forEach {
                    appendln("The member function '$it' should be private")
                }
            }
            Assert.assertTrue(message, otherMethods.isEmpty())
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Constraining+Visibility+%2F+Exercise1
status: Unchecked
record: -1

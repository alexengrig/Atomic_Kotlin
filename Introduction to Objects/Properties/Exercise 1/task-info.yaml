type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 39
    length: 8
    placeholder_text: /*TODO*/
    initial_state:
      length: 8
      offset: 39
    initialized_from_dependency: false
    possible_answer: |-
      var x = 0
          var y = 0
    selected: false
    status: Unchecked
  - offset: 87
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 87
    initialized_from_dependency: false
    possible_answer: x += steps
    selected: false
    status: Unchecked
  - offset: 138
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 138
    initialized_from_dependency: false
    possible_answer: x -= steps
    selected: false
    status: Unchecked
  - offset: 189
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 189
    initialized_from_dependency: false
    possible_answer: y += steps
    selected: false
    status: Unchecked
  - offset: 238
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 238
    initialized_from_dependency: false
    possible_answer: y -= steps
    selected: false
    status: Unchecked
  - offset: 284
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 284
    initialized_from_dependency: false
    possible_answer: '"($x,$y)"'
    selected: false
    status: Unchecked
  text: |-
    package properties1

    class Robot {
        /*TODO*/

        fun goRight(steps: Int) {
            TODO()
        }

        fun goLeft(steps: Int) {
            TODO()
        }

        fun goDown(steps: Int) {
            TODO()
        }

        fun goUp(steps: Int) {
            TODO()
        }

        fun getLocation(): String = TODO()
    }

    fun main(args: Array<String>) {
        val robot = Robot()
        println(robot.getLocation())
        robot.goRight(1)
        println(robot.getLocation())
        robot.goDown(2)
        println(robot.getLocation())
    }
    /* Output:
    (0,0)
    (1,0)
    (1,2)
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package properties1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestRobotIntro {
        class RobotHandler {
            val robot: Robot = Robot()
            val loggedMovements = StringBuilder()

            fun goRight(steps: Int) {
                robot.goRight(steps)
                loggedMovements.appendln("goRight($steps)")
            }

            fun goLeft(steps: Int) {
                robot.goLeft(steps)
                loggedMovements.appendln("goLeft($steps)")

            }

            fun goDown(steps: Int) {
                robot.goDown(steps)
                loggedMovements.appendln("goDown($steps)")

            }

            fun goUp(steps: Int) {
                robot.goUp(steps)
                loggedMovements.appendln("goUp($steps)")
            }
        }

        private fun testMovements(location: String, movements: RobotHandler.() -> Unit) {
            val robotHandler = RobotHandler()
            robotHandler.movements()
            val actualLocation = robotHandler.robot.getLocation()
            val message = if (robotHandler.loggedMovements.isEmpty()) {
                "Initial location of the robot should be (0,0)"
            } else {
                "Wrong location after:\n" + robotHandler.loggedMovements
            }
            Assert.assertEquals(message, location, actualLocation)
        }

        @Test
        fun test1Initial() = testMovements("(0,0)") {}

        @Test
        fun test2Right() = testMovements("(1,0)") {
            goRight(1)
        }

        @Test
        fun test3Left() = testMovements("(1,0)") {
            goRight(2)
            goLeft(1)
        }

        @Test
        fun test4Down() = testMovements("(0,1)") {
            goDown(1)
        }

        @Test
        fun test5Up() = testMovements("(0,1)") {
            goDown(2)
            goUp(1)
        }

        @Test
        fun test6SeveralSteps() = testMovements("(3,5)") {
            goRight(3)
            goDown(5)
        }

        @Test
        fun test7SeveralSteps2() = testMovements("(10,10)") {
            goRight(13)
            goDown(15)
            goUp(5)
            goLeft(3)
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Properties+%2F+Exercise1
status: Unchecked
record: -1

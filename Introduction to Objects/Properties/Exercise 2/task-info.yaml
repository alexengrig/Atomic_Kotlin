type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 35
    length: 12
    placeholder_text: '    /*TODO*/'
    dependency:
      section: Introduction to Objects
      lesson: Properties
      task: Exercise 1
      file: src/Task.kt
      placeholder: 1
      is_visible: true
    initial_state:
      length: 12
      offset: 35
    initialized_from_dependency: false
    possible_answer: |2
          var x = 0
          var y = 0
          val fieldSize = 100

          fun crossBoundary(coordinate: Int): Int {
              val inBounds = coordinate % fieldSize
              return if (inBounds < 0) {
                 fieldSize + inBounds
              }
              else {
                  inBounds
              }
          }
    selected: false
    status: Unchecked
  - offset: 86
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Properties
      task: Exercise 1
      file: src/Task.kt
      placeholder: 2
      is_visible: true
    initial_state:
      length: 6
      offset: 86
    initialized_from_dependency: false
    possible_answer: |-
      x += steps
              x = crossBoundary(x)
    selected: false
    status: Unchecked
  - offset: 137
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Properties
      task: Exercise 1
      file: src/Task.kt
      placeholder: 3
      is_visible: true
    initial_state:
      length: 6
      offset: 137
    initialized_from_dependency: false
    possible_answer: |-
      x -= steps
              x = crossBoundary(x)
    selected: false
    status: Unchecked
  - offset: 188
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Properties
      task: Exercise 1
      file: src/Task.kt
      placeholder: 4
      is_visible: true
    initial_state:
      length: 6
      offset: 188
    initialized_from_dependency: false
    possible_answer: |-
      y += steps
              y = crossBoundary(y)
    selected: false
    status: Unchecked
  - offset: 237
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Properties
      task: Exercise 1
      file: src/Task.kt
      placeholder: 5
      is_visible: true
    initial_state:
      length: 6
      offset: 237
    initialized_from_dependency: false
    possible_answer: |-
      y -= steps
              y = crossBoundary(y)
    selected: false
    status: Unchecked
  - offset: 283
    length: 6
    placeholder_text: TODO()
    dependency:
      section: Introduction to Objects
      lesson: Properties
      task: Exercise 1
      file: src/Task.kt
      placeholder: 6
      is_visible: true
    initial_state:
      length: 6
      offset: 283
    initialized_from_dependency: false
    possible_answer: '"($x,$y)"'
    selected: false
    status: Unchecked
  text: |-
    package properties2

    class Robot {
        /*TODO*/
        fun goRight(steps: Int) {
            TODO()
        }

        fun goLeft(steps: Int) {
            TODO()
        }

        fun goDown(steps: Int) {
            TODO()
        }

        fun goUp(steps: Int) {
            TODO()
        }

        fun getLocation(): String = TODO()
    }

    fun main(args: Array<String>) {
        val robot = Robot()
        println(robot.getLocation())
        robot.goUp(1)
        println(robot.getLocation())
        robot.goLeft(10)
        println(robot.getLocation())
    }
    /* Output:
    (0,0)
    (0,99)
    (90,99)
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package properties2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestRobotTeleportation {
        class RobotHandler {
            val robot: Robot = Robot()
            val loggedMovements = StringBuilder()

            fun goRight(steps: Int) {
                robot.goRight(steps)
                loggedMovements.appendln("goRight($steps)")
            }

            fun goLeft(steps: Int) {
                robot.goLeft(steps)
                loggedMovements.appendln("goLeft($steps)")

            }

            fun goDown(steps: Int) {
                robot.goDown(steps)
                loggedMovements.appendln("goDown($steps)")

            }

            fun goUp(steps: Int) {
                robot.goUp(steps)
                loggedMovements.appendln("goUp($steps)")
            }
        }

        private fun testMovements(location: String, movements: RobotHandler.() -> Unit) {
            val robotHandler = RobotHandler()
            robotHandler.movements()
            val actualLocation = robotHandler.robot.getLocation()
            val message = if (robotHandler.loggedMovements.isEmpty()) {
                "Initial location of the robot should be (0,0)"
            } else {
                "Wrong location after:\n" + robotHandler.loggedMovements
            }
            Assert.assertEquals(message, location, actualLocation)
        }

        @Test
        fun test1Sample() = testMovements("(90,99)") {
            goUp(1)
            goLeft(10)
        }

        @Test
        fun test2Left() = testMovements("(70,0)") {
            goLeft(30)
        }

        @Test
        fun test3Up() = testMovements("(0,99)") {
            goUp(1)
        }

        @Test
        fun test4Left() = testMovements("(70,0)") {
            goLeft(130)
        }

        @Test
        fun test5Up() = testMovements("(0,99)") {
            goUp(101)
        }

        @Test
        fun test6Right() = testMovements("(10,0)") {
            goRight(110)
        }

        @Test
        fun test7Down() = testMovements("(0,20)") {
            goDown(120)
        }

        @Test
        fun test8SeveralSteps() = testMovements("(10,10)") {
            goRight(313)
            goDown(415)
            goUp(505)
            goLeft(703)
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Introduction+to+Objects+%2F+Properties+%2F+Exercise2
status: Unchecked
record: -1

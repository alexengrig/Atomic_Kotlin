type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 114
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 114
    initialized_from_dependency: false
    possible_answer: |-
      val result = mutableMapOf<Int, Int>()
          for (code in codes) {
              val value = code.toIntOrNull(16)
              if (value != null) {
                  val occurrences = result[value]
                  result[value] = if (occurrences == null) 1 else occurrences + 1
              }
          }
          return result
    selected: false
    status: Unchecked
  text: |-
    package nullableTypes2

    import atomictest.eq

    fun countHexadecimalCodes(codes: List<String>): Map<Int, Int> {
        TODO()
    }

    fun main(args: Array<String>) {
        countHexadecimalCodes(listOf(
                "1", "3", "7", "8", "A", "B", "F")) eq
                mapOf(1 to 1, 3 to 1, 7 to 1, 8 to 1, 10 to 1, 11 to 1, 15 to 1)

        countHexadecimalCodes(listOf("1A", "1A", "1A")) eq
                mapOf(26 to 3)

        countHexadecimalCodes(listOf("Q")) eq mapOf()
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package nullableTypes2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestCountingHexadecimalCodes {
        private fun testCountingHexadecimalCodes(codes: List<String>, expected: Map<Int, Int>) {
            Assert.assertEquals("Wrong result for $codes:", expected, countHexadecimalCodes(codes))
        }

        @Test
        fun test1Sample() = testCountingHexadecimalCodes(
                listOf("1", "3", "7", "8", "A", "B", "F"),
                mapOf(1 to 1, 3 to 1, 7 to 1, 8 to 1, 10 to 1, 11 to 1, 15 to 1))

        @Test
        fun test2Sample() = testCountingHexadecimalCodes(listOf("1A", "1A", "1A"), mapOf(26 to 3))

        @Test
        fun test3Sample() = testCountingHexadecimalCodes(listOf("Q"), mapOf())

        @Test
        fun test4() = testCountingHexadecimalCodes(listOf("11", "11", "11"), mapOf(17 to 3))

        @Test
        fun test5() = testCountingHexadecimalCodes(listOf("AB", "1AAB", "23"), mapOf(171 to 1, 6827 to 1, 35 to 1))
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Usability+%2F+Nullable+Types+%2F+Exercise2
status: Unchecked
record: -1

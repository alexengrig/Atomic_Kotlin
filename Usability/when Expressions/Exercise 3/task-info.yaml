type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 93
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 93
    initialized_from_dependency: false
    possible_answer: |-
      var leftUnmatched = 0
          for (c in input) {
              when (c) {
                  '(' -> leftUnmatched++
                  ')' -> leftUnmatched--
                  ' ' -> {}
                  else -> throw IllegalArgumentException("The string must consist " +
                          "only of parentheses and whitespaces")
              }
              if (leftUnmatched < 0) return false
          }
          return leftUnmatched == 0
    selected: false
    status: Unchecked
  text: |-
    package whenExpressions3

    import atomictest.eq

    fun isBalanced(input: String): Boolean {
        TODO()
    }

    fun main(args: Array<String>) {
        isBalanced("(()) ()") eq true
        isBalanced(")(") eq false
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    package whenExpressions3

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBalancedBraces {
        private fun checkBalanced(s: String, expected: Boolean) {
            Assert.assertEquals("isBalanced($s) should return $expected", isBalanced(s), expected)
        }

        @Test fun test01Balanced() = checkBalanced("()", true)

        @Test fun test02Balanced() = checkBalanced("(()) ()", true)

        @Test fun test03Balanced() = checkBalanced("(()) ((()))", true)

        @Test fun test04Balanced() = checkBalanced("()", true)

        @Test fun test05Unbalanced() = checkBalanced("((", false)

        @Test fun test06Unbalanced() = checkBalanced("))", false)

        @Test fun test07Unbalanced() = checkBalanced(")(", false)

        @Test fun test08Unbalanced() = checkBalanced("(()(())))()", false)

        @Test fun test09Balanced() = checkBalanced("(() () ()) ((()) () (()) () (()))", true)

        private fun checkWrongInput(s: String) {
            try {
                isBalanced(s)
                throw AssertionError("""IllegalArgumentException should be thrown for 'isBalanced("$s")'""")
            } catch (e: IllegalArgumentException) {
                // ok
            }
        }


        @Test fun test10WrongCharacters() = checkWrongInput("1()")

        @Test fun test11WrongCharacters() = checkWrongInput("\\//")

        @Test fun test12WrongCharacters() = checkWrongInput("[][]")
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Usability+%2F+when+Expressions+%2F+Exercise3
status: Unchecked
record: -1

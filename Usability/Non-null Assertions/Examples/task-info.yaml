type: theory
files:
- name: src/NonNullAssert.kt
  visible: true
  text: |-
    // NonNullAssertions/NonNullAssert.kt
    import atomictest.*

    fun main(args: Array<String>) {
      val s1: String? = "abc"
      s1!! eq "abc"

      val s2: String? = null
      // Compiles, but produces a
      // KotlinNullPointerException:
      capture {
        val s3: String = s2!!
      } eq "KotlinNullPointerException"
    }
  learner_created: false
- name: src/NonNullAssertCall.kt
  visible: true
  text: |-
    // NonNullAssertions/NonNullAssertCall.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val s1: String? = "abc"
      s1!!.length eq 3
    }
  learner_created: false
- name: src/ValueFromMap.kt
  visible: true
  text: |-
    // NonNullAssertions/ValueFromMap.kt
    import atomictest.*

    fun main(args: Array<String>) {
      val map = mapOf(1 to "one")
      map[1]!!.toUpperCase() eq "ONE"
      map.getValue(1).toUpperCase() eq "ONE"
      capture {
        map[2]!!.toUpperCase()
      } eq "KotlinNullPointerException"
      capture {
        map.getValue(2).toUpperCase()
      } eq "NoSuchElementException: " +
        "Key 2 is missing in the map."
    }
  learner_created: false
status: Unchecked
record: -1

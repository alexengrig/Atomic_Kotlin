type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 75
    length: 0
    placeholder_text: ""
    initial_state:
      length: 0
      offset: 75
    initialized_from_dependency: false
    possible_answer: |2-

              val hours: Int = 0,
              val minutes: Int = 0,
              val seconds: Int = 0,
              val nanoseconds: Int = 0
    selected: false
    status: Unchecked
  - offset: 110
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 110
    initialized_from_dependency: false
    possible_answer: |2-

                  ((hours * 60 + minutes) * 60) + seconds
    selected: false
    status: Unchecked
  - offset: 148
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 148
    initialized_from_dependency: false
    possible_answer: |2-

                  (toSecondOfDay() * 1000000000L) + nanoseconds
    selected: false
    status: Unchecked
  text: |-
    package namedandDefaultArguments1

    import atomictest.eq

    class SimpleTime(
    ) {
        fun toSecondOfDay(): Int = TODO()

        fun toNanoOfDay(): Long = TODO()
    }

    /*
    fun main(args: Array<String>) {
        val noon = SimpleTime(12)
        noon.toSecondOfDay() eq 12 * 60 * 60

        val halfPastSeven = SimpleTime(hours = 6, minutes = 30)
        halfPastSeven.toNanoOfDay() eq 23400000000000

        val nanosecond = SimpleTime(nanoseconds = 1)
        nanosecond.toNanoOfDay() eq 1

        val second = SimpleTime(seconds = 1)
        second.toNanoOfDay() eq 1000000000
    }
    */
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package namedandDefaultArguments1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import java.time.LocalTime

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSimpleTime {
        private fun testSimpleTime(
                hours: Int,
                minutes: Int = 0,
                seconds: Int = 0,
                nanoseconds: Int = 0
        ) {
            val time = SimpleTime(hours, minutes, seconds, nanoseconds)

            val localTime = LocalTime.of(hours, minutes, seconds, nanoseconds)
            fun message(functionName: String) =
                    "Wrong '$functionName' for SimpleTime(hours = $hours, " +
                    "minutes = $minutes, seconds = $seconds, nanoseconds = $nanoseconds)"
            Assert.assertEquals(message("toSecondOfDay"), localTime.toSecondOfDay(), time.toSecondOfDay())
            Assert.assertEquals(message("toNanoOfDay"), localTime.toNanoOfDay(), time.toNanoOfDay())
        }

        @Test
        fun test1Sample() = testSimpleTime(12)

        @Test
        fun test2Sample() = testSimpleTime(6, 30)

        @Test
        fun test3Sample() = testSimpleTime(0, 0, 1)

        @Test
        fun test4Sample() = testSimpleTime(0, 0, 0, 1)

        @Test
        fun test5() = testSimpleTime(2, 12, 27)

        @Test
        fun test6() = testSimpleTime(1, 1, 1, 1)

        @Test
        fun test7() = testSimpleTime(11, 59, 59, 999999999)

        @Test
        fun test8() = testSimpleTime(5, 31)
    }

    fun SimpleTime(hours: Any?, minutes: Any?, seconds: Any?, nanoseconds: Any?): SimpleTime = TODO()
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Usability+%2F+Named+%26+Default+Arguments+%2F+Exercise1
status: Unchecked
record: -1

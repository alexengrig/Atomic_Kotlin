type: theory
files:
- name: src/Hello.kt
  visible: true
  text: |-
    // Summary1/Hello.kt

    fun main(args: Array<String>) {
      println("Hello, world!")
    }
    /* Output:
    Hello, world!
    */
  learner_created: false
- name: src/BasicFunctions.kt
  visible: true
  text: |-
    // Summary1/BasicFunctions.kt

    fun cube(x: Int): Int {
      return x * x * x
    }

    fun bang(s: String) = s + "!"

    fun main(args: Array<String>) {
      println(cube(3))
      println(bang("pop"))
    }
    /* Output:
    27
    pop!
    */
  learner_created: false
- name: src/Booleans.kt
  visible: true
  text: |-
    // Summary1/Booleans.kt

    fun main(args: Array<String>) {
      val opens = 9
      val closes = 20
      println("Operating hours: $opens - $closes")
      val hour = 6
      println("Current time: " + hour)

      val isOpen = hour >= opens && hour <= closes
      println("Open: " + isOpen)
      println("Not open: " + !isOpen)
      val isClosed = hour < opens || hour > closes
      println("Closed: " + isClosed)
    }
    /* Output:
    Operating hours: 9 - 20
    Current time: 6
    Open: false
    Not open: true
    Closed: true
    */
  learner_created: false
- name: src/IfResult.kt
  visible: true
  text: |-
    // Summary1/IfResult.kt

    fun main(args: Array<String>) {
      val result = if (99 < 100) 4 else 42
      println(result)
    }
    /* Output:
    4
    */
  learner_created: false
- name: src/IfExpression.kt
  visible: true
  text: |-
    // Summary1/IfExpression.kt

    fun main(args: Array<String>) {
      val activity = "swimming"
      val hour = 10

      val isOpen = if (
        activity == "swimming" ||
        activity == "ice skating") {
        val opens = 9
        val closes = 20
        println("Operating hours: " +
          opens + " - " + closes)
        hour >= opens && hour <= closes
      } else {
        false
      }
      println(isOpen)
    }
    /* Output:
    Operating hours: 9 - 20
    true
    */
  learner_created: false
- name: src/StrTemplates.kt
  visible: true
  text: |-
    // Summary1/StrTemplates.kt

    fun main(args: Array<String>) {
      val answer = 42
      println("Found $answer!")             // [1]
      val condition = true
      println(
        "${if (condition) 'a' else 'b'}")   // [2]
      println("printing a $1")              // [3]
    }
    /* Output:
    Found 42!
    a
    printing a $1
    */
  learner_created: false
- name: src/ThreeQuotes.kt
  visible: true
  text: |-
    // Summary1/ThreeQuotes.kt

    fun json(q: String, a: Int) = """{
      "question" : "$q",
      "answer" : $a
    }"""

    fun main(args: Array<String>) {
      println(json("The Ultimate", 42))
    }
    /* Output:
    {
      "question" : "The Ultimate",
      "answer" : 42
    }
    */
  learner_created: false
- name: src/NumberTypes.kt
  visible: true
  text: |-
    // Summary1/NumberTypes.kt

    fun main(args: Array<String>) {
      val n = 1000    // Int
      val l = 1000L   // Long
      val d = 1000.0  // Double
      println("$n $l $d")
    }
    /* Output:
    1000 1000 1000.0
    */
  learner_created: false
- name: src/Overflow.kt
  visible: true
  text: |-
    // Summary1/Overflow.kt

    fun main(args: Array<String>) {
      println(Int.MAX_VALUE + 1)
      println(Int.MAX_VALUE + 1L)
    }
    /* Output:
    -2147483648
    2147483648
    */
  learner_created: false
- name: src/Truncation.kt
  visible: true
  text: |-
    // Summary1/Truncation.kt

    fun main(args: Array<String>) {
      val d1: Double = 3.0 + 2 / 5
      println(d1)
      val d2: Double = 3 + 2.0 / 5
      println(d2)
    }
    /* Output:
    3.0
    3.4
    */
  learner_created: false
- name: src/While.kt
  visible: true
  text: |-
    // Summary1/While.kt

    fun testCondition(i: Int) = i < 100

    fun main(args: Array<String>) {
      var i = 0
      while (testCondition(i)) {
        print(".")
        i += 10
      }
    }
    /* Output:
    ..........
    */
  learner_created: false
- name: src/DoWhile.kt
  visible: true
  text: |-
    // Summary1/DoWhile.kt

    fun main(args: Array<String>) {
      var i = 0
      do {
        print(".")
        i += 10
      } while (testCondition(i))
    }
    /* Output:
    ..........
    */
  learner_created: false
- name: src/StringIteration.kt
  visible: true
  text: |-
    // Summary1/StringIteration.kt

    fun main(args: Array<String>) {
      for (c in "Kotlin") {
        print("$c ")
        // c += 1 // error:
        // val cannot be reassigned
      }
    }
    /* Output:
    K o t l i n
    */
  learner_created: false
- name: src/RangeOfInt.kt
  visible: true
  text: |-
    // Summary1/RangeOfInt.kt

    fun main(args: Array<String>) {
      for (i in 1..10)
        print("$i ")
    }
    /* Output:
    1 2 3 4 5 6 7 8 9 10
    */
  learner_created: false
- name: src/Membership.kt
  visible: true
  text: |-
    // Summary1/Membership.kt

    fun inNumRange(n: Int) = n in 50..100

    fun notLowerCase(ch: Char) = ch !in 'a'..'z'

    fun main(args: Array<String>) {
      val i1 = 11
      val i2 = 100
      val c1 = 'K'
      val c2 = 'k'
      println("$i1 ${inNumRange(i1)}")
      println("$i2 ${inNumRange(i2)}")
      println("$c1 ${notLowerCase(c1)}")
      println("$c2 ${notLowerCase(c2)}")
    }
    /* Output:
    11 false
    100 true
    K true
    k false
    */
  learner_created: false
- name: src/UnitReturn.kt
  visible: true
  text: |-
    // Summary1/UnitReturn.kt

    fun main(args: Array<String>) {
      val result = println("returns Unit")
      println(result)
    }
    /* Output:
    returns Unit
    kotlin.Unit
    */
  learner_created: false
status: Unchecked
record: -1

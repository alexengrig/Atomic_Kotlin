type: theory
files:
- name: src/ForIsAStatement.kt
  visible: true
  text: |-
    // ExpressionsStatements/ForIsAStatement.kt

    fun main(args: Array<String>) {
      // Can't do this:
      // val f = for(i in 1..10) {}
      // Compiler error message:
      // for is not an expression, and
      // only expressions are allowed here
    }
  learner_created: false
- name: src/UnitReturnType.kt
  visible: true
  text: |-
    // ExpressionsStatements/UnitReturnType.kt

    fun unitFun() = Unit

    fun main(args: Array<String>) {
      println(unitFun())
      val u1: Unit = println(42)
      println(u1)
      val u2 = println(0) // Type inference
      println(u2)
    }
    /* Output:
    kotlin.Unit
    42
    kotlin.Unit
    0
    kotlin.Unit
    */
  learner_created: false
- name: src/AssigningAnIf.kt
  visible: true
  text: |-
    // ExpressionsStatements/AssigningAnIf.kt

    fun main(args: Array<String>) {
      val result1 = if (11 > 42) 9 else 5

      val result2 = if (1 < 2) {
        val a = 11
        a + 42
      } else 42

      val result3 =
        if ('x' < 'y')
          println("x < y")
        else
          println("x > y")

      println(result1)
      println(result2)
      println(result3)
    }
    /* Output:
    x < y
    5
    53
    kotlin.Unit
    */
  learner_created: false
- name: src/PostfixVsPrefix.kt
  visible: true
  text: |-
    // ExpressionsStatements/PostfixVsPrefix.kt

    fun main(args: Array<String>) {
      var i = 10
      println(i++)
      println(i)
      var j = 20
      println(++j)
      println(j)
    }
    /* Output:
    10
    11
    21
    21
    */
  learner_created: false
- name: src/ConfusingOperator.kt
  visible: true
  text: |-
    // ExpressionsStatements/ConfusingOperator.kt

    fun main(args: Array<String>) {
      var i = 1
      println(i++ + ++i)
    }
  learner_created: false
status: Unchecked
record: -1

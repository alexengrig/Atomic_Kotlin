type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 186
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 186
    initialized_from_dependency: false
    possible_answer: return books.map { it.author }.toSet()
    selected: false
    status: Unchecked
  text: |-
    package lambdas2

    import atomictest.eq

    data class Author(val name: String)

    data class Book(val title: String, val author: Author)

    fun getAuthors(books: List<Book>): Set<Author> {
        TODO()
    }

    fun main(args: Array<String>) {
        val books = listOf(
                Book("The Philosopher's Stone", Author("J. K. Rowling")),
                Book("The Chamber of Secrets", Author("J. K. Rowling")),
                Book("The Prisoner of Azkaban", Author("J. K. Rowling")),
                Book("The Goblet of Fire", Author("J. K. Rowling")),
                Book("The Order of the Phoenix", Author("J. K. Rowling")),
                Book("The Half-Blood Prince", Author("J. K. Rowling")),
                Book("The Deathly Hallows", Author("J. K. Rowling"))
        )
        getAuthors(books) eq setOf(Author("J. K. Rowling"))
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package lambdas2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBooks {
        private fun checkBooks(books: List<Book>, authors: Set<Author>) {
            Assert.assertEquals("Wrong result for $books:", getAuthors(books), authors)
        }

        @Test
        fun test1Sample() {
            checkBooks(listOf(
                    Book("The Philosopher's Stone", Author("J. K. Rowling")),
                    Book("The Chamber of Secrets", Author("J. K. Rowling")),
                    Book("The Prisoner of Azkaban", Author("J. K. Rowling")),
                    Book("The Goblet of Fire", Author("J. K. Rowling")),
                    Book("The Order of the Phoenix", Author("J. K. Rowling")),
                    Book("The Half-Blood Prince", Author("J. K. Rowling")),
                    Book("The Deathly Hallows", Author("J. K. Rowling"))
            ), setOf(Author("J. K. Rowling")))
        }

        @Test
        fun test2EmptyList() {
            checkBooks(listOf(), setOf())
        }

        @Test
        fun test3OneAuthor() {
            checkBooks(listOf(Book("Doctor Zhivago", Author("Boris Pasternak"))),
                    setOf(Author("Boris Pasternak")))
        }

        @Test
        fun test4SeveralAuthors() {
            checkBooks(listOf(Book("For Whom the Bell Tolls", Author("Ernest Hemingway")),
                    Book("The Old Man and the Sea", Author("Ernest Hemingway")),
                    Book("One Hundred Years of Solitude", Author("Gabriel García Márquez"))),
                    setOf(Author("Ernest Hemingway"), Author("Gabriel García Márquez")))
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Lambdas+%2F+Exercise2
status: Unchecked
record: -1

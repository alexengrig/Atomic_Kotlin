type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 203
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 203
    initialized_from_dependency: false
    possible_answer: if (it % 2 == 0) it * it else null
    selected: false
    status: Unchecked
  text: |-
    package functionTypes2

    import atomictest.eq

    fun List<Int>.transform1(): List<Int> {
        return filter { it % 2 == 0 }.map { it * it }
    }

    fun List<Int>.transform2(): List<Int> {
        return mapNotNull { TODO() }
    }

    fun main(args: Array<String>) {
        val list = listOf(1, 2, 3)
        list.transform1() eq listOf(4)
        list.transform2() eq listOf(4)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package functionTypes2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestMapNotNull {
        private fun check(
                list: List<Int>
        ) {
            Assert.assertEquals("Wrong result for $list:",
                    list.filter { it % 2 == 0 }.map { it * it },
                    list.transform2())
            list.transform1()
        }

        @Test
        fun test1Sample() = check(listOf(1, 2, 3))

        @Test
        fun test2() = check(listOf(1, -2, 3, -4))

        @Test
        fun test3() = check(listOf(11, 22, 30))
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Function+Types+%2F+Exercise2
status: Unchecked
record: -1

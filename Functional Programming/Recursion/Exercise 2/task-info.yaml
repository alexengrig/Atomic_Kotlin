type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 401
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 401
    initialized_from_dependency: false
    possible_answer: |-
      var current = 0L
          var next = 1L
          repeat(n) {
              val new = current + next
              current = next
              next = new
          }
          return current
    selected: false
    status: Unchecked
  text: |-
    package recursion2

    import atomictest.eq

    // For comparison
    fun fibonacciRecursive(n: Int): Long {
        tailrec fun fibonacci(
                n: Int,
                current: Long,
                next: Long
        ): Long {
            if (n == 0) return current
            return fibonacci(
                    n - 1, next, current + next)
        }

        return fibonacci(n, 0L, 1L)
    }

    fun fibonacciIterative(n: Int): Long {
        TODO()
    }

    fun main(args: Array<String>) {
        (0..8).map { fibonacciRecursive(it) } eq
                "[0, 1, 1, 2, 3, 5, 8, 13, 21]"
        fibonacciRecursive(22) eq 17711
        fibonacciRecursive(50) eq 12586269025

        (0..8).map { fibonacciIterative(it) } eq
                "[0, 1, 1, 2, 3, 5, 8, 13, 21]"
        fibonacciIterative(22) eq 17711
        fibonacciIterative(50) eq 12586269025

        println(fibonacciIterative(17))
        println(fibonacciIterative(33))
        println(fibonacciIterative(39))
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package recursion2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestPersonsMap {
        @Test
        fun test1Sample() {
            Assert.assertEquals("Wrong result for sample",
                    "[0, 1, 1, 2, 3, 5, 8, 13, 21]",
                    (0..8).map { fibonacciIterative(it) }.toString())
            Assert.assertEquals("Wrong result for sample",
                    17711, fibonacciIterative(22))
            Assert.assertEquals("Wrong result for sample",
                    12586269025, fibonacciIterative(50))
        }

        private fun checkNumber(n: Int, fib: Long) {
            Assert.assertEquals("Wrong Fibonacci value for $n",
                    fib, fibonacciIterative(n))
        }

        @Test
        fun test2() = checkNumber(17, 1597)

        @Test
        fun test3() = checkNumber(33, 3524578)

        @Test
        fun test4() = checkNumber(39, 63245986)
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Recursion+%2F+Exercise2
status: Unchecked
record: -1

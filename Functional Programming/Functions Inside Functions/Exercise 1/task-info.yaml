type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 133
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 133
    initialized_from_dependency: false
    possible_answer: if (predicate(it)) return it
    selected: false
    status: Unchecked
  text: |-
    package functionsInsideFunctions1

    import atomictest.eq

    fun <T> List<T>.find(predicate: (T) -> Boolean): T? {
        forEach {
            TODO()
        }
        return null
    }

    fun main(args: Array<String>) {
        listOf(1, 2, 3).find { it < 0 } eq null
        listOf(1, -2, -3).find { it < 0 } eq -2
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package functionsInsideFunctions1

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestFind {
        @Test
        fun test1Sample() {
            Assert.assertEquals("Wrong result for sample", null,
                    listOf(1, 2, 3).find { it < 0 })
            Assert.assertEquals("Wrong result for sample", -2,
                    listOf(1, -2, -3).find { it < 0 })
        }

        @Test
        fun test2() {
            val list = listOf(1, 2, 0, 2, 4)
            Assert.assertEquals("Wrong result for finding zero in $list", 0,
                    list.find { it == 0 })
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Functions+Inside+Functions+%2F+Exercise1
status: Unchecked
record: -1

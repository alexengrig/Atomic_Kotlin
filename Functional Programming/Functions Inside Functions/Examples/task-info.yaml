type: theory
files:
- name: src/LocalFunctions.kt
  visible: true
  text: |-
    // LocalFunctions/LocalFunctions.kt

    fun main(args: Array<String>) {
      val logMsg = StringBuilder()
      fun log(message: String) =
        logMsg.appendln(message)
      log("Starting computation")
      // Imitating computation
      val x = 42
      log("Computation result: $x")
      println(logMsg.toString())
    }
    /* Output:
    Starting computation
    Computation result: 42
    */
  learner_created: false
- name: src/LocalExtensions.kt
  visible: true
  text: |-
    // LocalFunctions/LocalExtensions.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      fun String.exclaim() = "$this!"
      "Hello".exclaim() eq "Hello!"
      "Hallo".exclaim() eq "Hallo!"
      "Bonjour".exclaim() eq "Bonjour!"
      "Ciao".exclaim() eq "Ciao!"
    }
  learner_created: false
- name: src/Session.kt
  visible: true
  text: |-
    // LocalFunctions/Session.kt
    package localfunctions

    class Session(
      val title: String,
      val speaker: String
    )

    val sessions = listOf(Session(
      "Kotlin in Production", "Christina Lee"))

    val myFavSpeakers = setOf("Christina Lee")
  learner_created: false
- name: src/LocalFunctionReference.kt
  visible: true
  text: |-
    // LocalFunctions/LocalFunctionReference.kt
    package localfunctions
    import atomictest.eq

    fun main(args: Array<String>) {
      fun interesting(session: Session): Boolean {
        if (session.title.contains("Kotlin") &&
          session.speaker in myFavSpeakers) {
          return true
        }
        // ... more checks
        return false
      }
      sessions.any(::interesting) eq true
    }
  learner_created: false
- name: src/InterestingSessions.kt
  visible: true
  text: |-
    // LocalFunctions/InterestingSessions.kt
    package localfunctions
    import atomictest.eq

    fun main(args: Array<String>) {
      sessions.any(
        fun(session: Session): Boolean {    // [1]
          if (session.title.contains("Kotlin") &&
            session.speaker in myFavSpeakers) {
            return true
          }
          // ... more checks
          return false
        }) eq true
    }
  learner_created: false
- name: src/ReturnFromFun.kt
  visible: true
  text: |-
    // LocalFunctions/ReturnFromFun.kt

    fun main(args: Array<String>) {
      val list = listOf(1, 2, 3, 4, 5)
      val value = 3
      list.forEach {
        if (it == value) return           // [1]
      }
      println("This line is NOT called")  // [2]
    }
    /* Output:
    */
  learner_created: false
- name: src/LabeledReturn.kt
  visible: true
  text: |-
    // LocalFunctions/LabeledReturn.kt
    package localfunctions
    import atomictest.eq

    fun main(args: Array<String>) {
      sessions.any { session ->
        if (session.title.contains("Kotlin") &&
          session.speaker in myFavSpeakers) {
          return@any true
        }
        // ... more checks
        false
      } eq true
    }
  learner_created: false
- name: src/CustomLabel.kt
  visible: true
  text: |-
    // LocalFunctions/CustomLabel.kt

    fun main(args: Array<String>) {
      val list = listOf(1, 2, 3, 4, 5)
      val value = 3
      list.forEach tag@{             // [1]
        if (it == value) return@tag  // [2]
      }
      println("This line is called")
    }
    /* Output:
    This line is called
    */
  learner_created: false
- name: src/HelperFunction.kt
  visible: true
  text: |-
    // LocalFunctions/HelperFunction.kt
    package localfunctions
    import atomictest.eq

    class Window(
      var height: Int,
      var width: Int,
      var isVisible: Boolean
    )

    fun minimizeWindow(window: Window) {
      with(window) {
        if (!window.isVisible) return   // [1]
        height = 0
        width = 0
      }
      // ...                            // [2]
    }

    fun main(args: Array<String>) {
      Window(100, 100, true)
        .also { minimizeWindow(it) }
        .height eq 0
      Window(100, 100, false)
        .also { minimizeWindow(it) }
        .height eq 100
    }
  learner_created: false
status: Unchecked
record: -1

type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 121
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 121
    initialized_from_dependency: false
    possible_answer: if (f(it)) listOf(it) else emptyList()
    selected: false
    status: Unchecked
  text: |-
    package manipulatingLists7

    import atomictest.eq

    fun <T> List<T>.filter(f: (T) -> Boolean): List<T> =
            flatMap { TODO() }

    fun main(args: Array<String>) {
        val list = listOf(1, 12, 22, 31)
        list.filter { it.toString().contains("2") } eq
                listOf(12, 22)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package manipulatingLists7

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import kotlin.collections.filter as filterLibrary

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestFilter {
        private fun <T> checkFilter(
                list: List<T>,
                predicate: (T) -> Boolean
        ) {
            Assert.assertEquals("Wrong 'filter' implementation",
                    list.filterLibrary(predicate), list.filter(predicate))
        }

        @Test
        fun test1Sample() = checkFilter(listOf(1, 12, 22, 31)) { it.toString().contains("2") }

        @Test
        fun test2() = checkFilter(listOf("abc", "cd")) { it.contains('a') }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Manipulating+Lists+%2F+Exercise7
status: Unchecked
record: -1

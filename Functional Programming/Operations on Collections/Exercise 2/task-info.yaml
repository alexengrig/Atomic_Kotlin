type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 84
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 84
    initialized_from_dependency: false
    possible_answer: |2

          x in setOf(1, 5, 32)
          // other options:
          // x % 5 == 0
          // x.toString().contains('5')
    selected: false
    status: Unchecked
  text: |-
    package operationsonCollections2

    import atomictest.eq

    val operation = { x: Int -> TODO()}

    fun main(args: Array<String>) {
        val first = listOf(1, 5, 32, 45, 70, 511)
        first.any(operation) eq true
        first.all(operation) eq false
        first.none(operation) eq false
        first.count(operation) eq 3
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package operationsonCollections2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestSecond {
        @Test
        fun testSample() {
            fun message(functionName: String) = "Wrong result for '$functionName':"

            val first = listOf(1, 5, 32, 45, 70, 511)

            Assert.assertEquals(message("any"), first.any(operation), true)
            Assert.assertEquals(message("all"), first.all(operation), false)
            Assert.assertEquals(message("none"), first.none(operation), false)
            Assert.assertEquals(message("count"), first.count(operation), 3)
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Operations+on+Collections+%2F+Exercise2
status: Unchecked
record: -1

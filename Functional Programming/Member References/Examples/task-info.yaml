type: theory
files:
- name: src/PropertyReference.kt
  visible: true
  text: |-
    // MemberReferences/PropertyReference.kt
    package memberreferences1
    import atomictest.eq

    data class Message(
      val sender: String,
      val text: String,
      val isRead: Boolean
    )

    fun main(args: Array<String>) {
      val messages = listOf(
        Message("Kitty", "Hey!", true),
        Message("Kitty", "Where are you?", false))
      val unread =
        messages.filterNot(Message::isRead)
      unread.size eq 1
      unread.single().text eq "Where are you?"
    }
  learner_created: false
- name: src/SortWith.kt
  visible: true
  text: |-
    // MemberReferences/SortWith.kt
    package memberreferences1
    import atomictest.eq

    fun main(args: Array<String>) {
      val messages = listOf(
        Message("Kitty", "Hey!", true),
        Message("Kitty", "Where are you?", false),
        Message("Boss", "Meeting today", false))
      messages.sortedWith(compareBy(
        Message::isRead, Message::sender)) eq
        listOf(
          // First unread, sorted by sender:
          Message("Boss", "Meeting today", false),
          Message("Kitty",
            "Where are you?", false),
          // Then read, also sorted by sender:
          Message("Kitty", "Hey!", true))
    }
  learner_created: false
- name: src/FunctionReference.kt
  visible: true
  text: |-
    // MemberReferences/FunctionReference.kt
    package memberreferences2
    import atomictest.eq

    data class Message(
      val sender: String,
      val text: String,
      val isRead: Boolean,
      val attachments: List<Attachment>
    )

    data class Attachment(
      val type: String,
      val name: String
    )

    fun Message.isImportant(): Boolean =
      text.contains("Salary increase") ||
        attachments.any {
          it.type == "image" &&
          it.name.contains("cat")
        }

    fun main(args: Array<String>) {
      val messages = listOf(Message(
        "Boss", "Let's discuss goals " +
        "for next year", false,
        listOf(Attachment("image", "cute cats"))))
      messages.any(Message::isImportant) eq true
    }
  learner_created: false
- name: src/TopLevelFunctionRef.kt
  visible: true
  text: |-
    // MemberReferences/TopLevelFunctionRef.kt
    package memberreferences2
    import atomictest.eq

    fun ignore(message: Message) =
      !message.isImportant() &&
        message.sender in setOf("Boss", "Mom")

    fun main(args: Array<String>) {
      val text = "Let's discuss goals " +
        "for the next year"
      val msgs = listOf(
        Message("Boss", text, false, listOf()),
        Message("Boss", text, false, listOf(
          Attachment("image", "cute cats"))))
      msgs.filter(::ignore).size eq 1
      msgs.filterNot(::ignore).size eq 1
    }
  learner_created: false
- name: src/ConstructorReference.kt
  visible: true
  text: |-
    // MemberReferences/ConstructorReference.kt
    package memberreferences3
    import atomictest.eq

    data class Student(
      val id: Int,
      val name: String
    )

    fun main(args: Array<String>) {
      val names = listOf("Alice", "Bob")
      val students =
        names.mapIndexed { index, name ->
          Student(index, name)
        }
      students eq listOf(Student(0, "Alice"),
        Student(1, "Bob"))
      names.mapIndexed(::Student) eq students
    }
  learner_created: false
status: Unchecked
record: -1

type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 322
    length: 54
    placeholder_text: TODO("compareByDescending(???).then(compareBy(???)))")
    initial_state:
      length: 54
      offset: 322
    initialized_from_dependency: false
    possible_answer: |-
      compareByDescending(Student::grade)
                      .then(compareBy(Student::surname, Student::name))
    selected: false
    status: Unchecked
  text: |-
    package memberReferences01

    import atomictest.eq

    data class Student(
            val name: String,
            val surname: String,
            val grade: Int
    ) {
        override fun toString(): String {
            return "$name $surname ($grade)"
        }
    }

    fun List<Student>.sortByGradeAndThenByName(): List<Student> = sortedWith(
            TODO("compareByDescending(???).then(compareBy(???)))"))

    fun main(args: Array<String>) {
        val people = listOf(
                Student("Alice", "Johnson", 1),
                Student("Bob", "Smith", 2),
                Student("Charlie", "Smith", 2))

        people.sortByGradeAndThenByName() eq
                "[Bob Smith (2), Charlie Smith (2), " +
                "Alice Johnson (1)]"
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package memberReferences01

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters
    import java.util.*

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestMapImpl {
        private fun check(
                list: List<Student>
        ) {
            Assert.assertEquals("Wrong result for $list:",
                    list.sortedWith(compareByDescending(Student::grade)
                            .then(compareBy(Student::surname, Student::name))),
                    list.sortByGradeAndThenByName())
        }

        @Test
        fun test1Sample() = check(listOf(
                Student("Alice", "Johnson", 3),
                Student("Bob", "Smith", 2),
                Student("Charlie", "Smith", 2)))

        @Test
        fun test2() = check(listOf(
                Student("Alice", "Johnson", 1),
                Student("Bob", "Smith", 1),
                Student("Charlie", "Smith", 1)))

        @Test
        fun test3() = check(listOf(
                Student("Bob", "Smith", 1),
                Student("Alice", "Smith", 1),
                Student("Charlie", "Smith", 1)))

        @Test
        fun test4() = check(listOf(
                Student("Bob", "Smith", 2),
                Student("Alice", "Smith", 3),
                Student("Charlie", "Smith", 1)))

        @Test
        fun test5() = check(listOf(
                Student("Alice", "Johnson", 1),
                Student("Alice", "Smith", 1),
                Student("Alice", "Jones", 1)))

        @Test
        fun test6() {
            val names = ('A'..'E').map { "$it" }
            val surnames = (1..6).map { "S$it" }
            val random = Random()
            repeat(20) {
                check(names.shuffled().zip(surnames.shuffled()).map { (name, surname) ->
                    Student(name, surname, random.nextInt(4))
                })
            }
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Member+References+%2F+Exercise1
status: Unchecked
record: -1

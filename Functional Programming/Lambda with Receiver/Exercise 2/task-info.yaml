type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 119
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 119
    initialized_from_dependency: false
    possible_answer: |2-

          val list = mutableListOf<Int>()
          list.action()
          return list
    selected: false
    status: Unchecked
  text: |-
    package lambdawithReceiver2

    import atomictest.eq

    fun buildList(action: MutableList<Int>.() -> Unit): List<Int> {
        TODO()
    }

    fun main(args: Array<String>) {
        val list = buildList {
            add(0)
            for (i in 1..5) {
                add(i)
            }
        }
        list eq listOf(0, 1, 2, 3, 4, 5)
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package lambdawithReceiver2

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestBuildList {
        private fun check(
                message: String,
                action: MutableList<Int>.() -> Unit
        ) {
            Assert.assertEquals(message,
                    mutableListOf<Int>().apply(action),
                    buildList(action))

        }

        @Test
        fun test1Sample() = check("Wrong result for sample:") {
            add(0)
            for (i in 1..5) {
                add(i)
            }
        }

        @Test
        fun test2() = check("Wrong result for 'buildList { add(42) }':") {
            add(42)
        }
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+Lambda+with+Receiver+%2F+Exercise2
status: Unchecked
record: -1

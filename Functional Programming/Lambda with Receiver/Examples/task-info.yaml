type: theory
files:
- name: src/StringBuilder.kt
  visible: true
  text: |-
    // LambdaWithReceiver/StringBuilder.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val stringBuilder = StringBuilder()  // [1]
      stringBuilder.append("Alphabet: ")   // [2]
      for (ch in 'a'..'z')
        stringBuilder.append(ch)           // [3]
      stringBuilder.toString() eq          // [4]
        "Alphabet: abcdefghijklmnopqrstuvwxyz"
    }
  learner_created: false
- name: src/RegularLambda.kt
  visible: true
  text: |-
    // LambdaWithReceiver/RegularLambda.kt
    package regularlambda
    import atomictest.eq

    fun buildStr(
      builderAction: (StringBuilder) -> Unit
    ): String {
      val sb = StringBuilder()
      builderAction(sb)
      return sb.toString()
    }

    fun main(args: Array<String>) {
      buildStr {
        it.append("Alphabet: ")
        for (ch in 'a'..'z')
          it.append(ch)
      } eq
      "Alphabet: abcdefghijklmnopqrstuvwxyz"
    }
  learner_created: false
- name: src/BuildString.kt
  visible: true
  text: |-
    // LambdaWithReceiver/BuildString.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      buildString {
        append("Alphabet: ")
        for (ch in 'a'..'z')
          append(ch)
      } eq
      "Alphabet: abcdefghijklmnopqrstuvwxyz"
    }
  learner_created: false
- name: src/BuildStringAndThis.kt
  visible: true
  text: |-
    // LambdaWithReceiver/BuildStringAndThis.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      buildString {
        this.append("Alphabet: ")     // [1]
        for (ch in 'a'..'z')
          append(ch)                  // [2]
      } eq
      "Alphabet: abcdefghijklmnopqrstuvwxyz"
    }
  learner_created: false
- name: src/Extensions.kt
  visible: true
  text: |-
    // LambdaWithReceiver/Extensions.kt
    package lambdawithreceiver

    fun StringBuilder.appendAlphabet() {
      this.append("Alphabet:")   // Explicit
      for (ch in 'a'..'z')
        append(ch)               // Implicit
    }
  learner_created: false
- name: src/Declarations.kt
  visible: true
  text: |-
    // LambdaWithReceiver/Declarations.kt
    package lambdawithreceiver
    import atomictest.eq

    fun buildString1(
      builderAction:
        (StringBuilder) -> Unit   // [1]
    ): String {
      val sb = StringBuilder()
      builderAction(sb)           // [2]
      return sb.toString()
    }

    fun buildString2(
      builderAction:
        StringBuilder.() -> Unit  // [3]
    ): String {
      val sb = StringBuilder()
      sb.builderAction()          // [4]
      return sb.toString()
    }

    fun main(args: Array<String>) {
      buildString1 {
        it.append("Regular lambda")
      } eq "Regular lambda"

      buildString2 {
        append("Lambda with receiver")
      } eq "Lambda with receiver"
    }
  learner_created: false
status: Unchecked
record: -1

type: theory
files:
- name: src/People.kt
  visible: true
  text: |-
    // FromListsToMaps/People.kt
    package fromliststomaps

    data class Person(
      val name: String,
      val age: Int
    )

    fun people() = listOf("Alice", "Arthricia",
      "Bob", "Bill", "Birdperson", "Charlie",
      "Crocubot", "Franz", "Revolio").zip(
      listOf(21,15,25,25,42,21,42,21,33)) {
        name, age -> Person(name, age)
      }
  learner_created: false
- name: src/GroupBy.kt
  visible: true
  text: |-
    // FromListsToMaps/GroupBy.kt
    import fromliststomaps.*
    import atomictest.eq

    fun main(args: Array<String>) {
      val map: Map<Int, List<Person>> =
        people().groupBy(Person::age)
      map[15] eq listOf(Person("Arthricia", 15))
      map[21] eq listOf(
        Person("Alice", 21),
        Person("Charlie", 21),
        Person("Franz", 21))
      map[22] eq null
      map[25] eq listOf(
        Person("Bob", 25),
        Person("Bill", 25))
      map[33] eq listOf(Person("Revolio", 33))
      map[42] eq listOf(
        Person("Birdperson", 42),
        Person("Crocubot", 42))
    }
  learner_created: false
- name: src/GroupByVsFilter.kt
  visible: true
  text: |-
    // FromListsToMaps/GroupByVsFilter.kt
    import fromliststomaps.*
    import atomictest.eq

    fun main(args: Array<String>) {
      val groups =
        people().groupBy { it.name.first() }
      // groupBy() produces map-speed access:
      groups['A'] eq listOf(Person("Alice", 21),
        Person("Arthricia", 15))
      groups['Z'] eq null

      // Must repeat filter() for each character:
      people().filter {
        it.name.first() == 'A'
      } eq listOf(Person("Alice", 21),
          Person("Arthricia", 15))
      people().filter {
        it.name.first() == 'F'
      } eq listOf(Person("Franz", 21))

      people().partition {
        it.name.first() == 'A'
      } eq Pair(
        listOf(Person("Alice", 21),
          Person("Arthricia", 15)),
        listOf(Person("Bob", 25),
          Person("Bill", 25),
          Person("Birdperson", 42),
          Person("Charlie", 21),
          Person("Crocubot", 42),
          Person("Franz", 21),
          Person("Revolio", 33)))
    }
  learner_created: false
- name: src/AssociateBy.kt
  visible: true
  text: |-
    // FromListsToMaps/AssociateBy.kt
    import fromliststomaps.*
    import atomictest.eq

    fun main(args: Array<String>) {
      val map: Map<String, Person> =
        people().associateBy { it.name }
      map eq mapOf(
        "Alice" to Person("Alice", 21),
        "Arthricia" to Person("Arthricia", 15),
        "Bob" to Person("Bob", 25),
        "Bill" to Person("Bill", 25),
        "Birdperson" to Person("Birdperson", 42),
        "Charlie" to Person("Charlie", 21),
        "Crocubot" to Person("Crocubot", 42),
        "Franz" to Person("Franz", 21),
        "Revolio" to Person("Revolio", 33))

      // associateBy() fails when the key isn't
      // unique -- elements disappear:
      val ages = people().associateBy { it.age }
      ages eq mapOf(
        21 to Person("Franz", 21),
        15 to Person("Arthricia", 15),
        25 to Person("Bill", 25),
        42 to Person("Crocubot", 42),
        33 to Person("Revolio", 33))
    }
  learner_created: false
- name: src/GetOrPut.kt
  visible: true
  text: |-
    // FromListsToMaps/GetOrPut.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val map = mapOf(1 to "one", 2 to "two")

      map.getOrElse(0) { "zero" } eq "zero"

      val mutableMap = map.toMutableMap()
      mutableMap.getOrPut(0) { "zero" } eq
        "zero"
      mutableMap eq "{1=one, 2=two, 0=zero}"
    }
  learner_created: false
- name: src/FilteringMap.kt
  visible: true
  text: |-
    // FromListsToMaps/FilteringMap.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val map = mapOf(1 to "one",
        2 to "two", 3 to "three", 4 to "four")

      map.filterKeys { it % 2 == 1 } eq
        "{1=one, 3=three}"

      map.filterValues { it.contains('o') } eq
        "{1=one, 2=two, 4=four}"

      map.filter { entry ->
        entry.key % 2 == 1 &&
          entry.value.contains('o')
      } eq "{1=one}"
    }
  learner_created: false
- name: src/TransformingMap.kt
  visible: true
  text: |-
    // FromListsToMaps/TransformingMap.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val even = mapOf(2 to "two", 4 to "four")
      even.map {                            // [1]
        "${it.key}=${it.value}"
      } eq listOf("2=two", "4=four")

      even.map { (key, value) ->            // [2]
        "$key=$value"
      } eq listOf("2=two", "4=four")

      even.mapKeys { (num, _) -> -num }     // [3]
        .mapValues { (_, str) -> "minus $str" } eq
        mapOf(-2 to "minus two",
          -4 to "minus four")

      even.map { (key, value) ->
        -key to "minus $value"
      }.toMap() eq mapOf(-2 to "minus two", // [4]
        -4 to "minus four")
    }
  learner_created: false
- name: src/SimilarOperation.kt
  visible: true
  text: |-
    // FromListsToMaps/SimilarOperation.kt
    import atomictest.eq

    fun main(args: Array<String>) {
      val map = mapOf(1 to "one",
        -2 to "minus two")
      map.any { (key, _) -> key < 0 } eq true
      map.all { (key, _) -> key < 0 } eq false
      map.maxBy { it.key }?.value eq "one"
    }
  learner_created: false
status: Unchecked
record: -1

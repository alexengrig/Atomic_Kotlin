type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 175
    length: 6
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 175
    initialized_from_dependency: false
    possible_answer: |-
      return people.groupBy(Person::age).mapValues { (_, group) ->
              group.map(Person::name)
          }
    selected: false
    status: Unchecked
  text: |-
    package fromListstoMaps01

    import atomictest.eq

    data class Person(val name: String, val age: Int)

    fun buildAgeToNamesMap(people: List<Person>): Map<Int, List<String>> {
        TODO()
    }

    fun main(args: Array<String>) {
        val people = listOf(Person("Alice", 21),
                Person("Bob", 25), Person("Charlie", 25))

        buildAgeToNamesMap(people) eq
                mapOf(21 to listOf("Alice"),
                        25 to listOf("Bob", "Charlie"))

        buildString {  }
    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |-
    package fromListstoMaps01

    import org.junit.Assert
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runners.MethodSorters

    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class TestPersonsMap {
        private fun check(
                list: List<Person>
        ) {
            Assert.assertEquals("Wrong result for $list:",
                    list.groupBy(Person::age).mapValues { (_, group) ->
                        group.map(Person::name)
                    },
                    buildAgeToNamesMap(list))

        }

        @Test
        fun test1Sample() = check(listOf(Person("Alice", 21),
                Person("Bob", 25), Person("Charlie", 25)))


        @Test
        fun test2() = check(listOf())

        @Test
        fun test3() = check(listOf(Person("Alice", 21), Person("Bob", 25)))

        @Test
        fun test4() = check(listOf(Person("Bob", 25), Person("Charlie", 25)))

        @Test
        fun test5() = check(listOf(
                Person("A", 10), Person("B", 10),
                Person("C", 20), Person("D", 20), Person("E", 20), Person("F", 20),
                Person("X", 30), Person("Y", 30), Person("Z", 30)
        ))
    }
  learner_created: false
feedback_link: |
  https://docs.google.com/forms/d/e/1FAIpQLSdkaliSwYkjiV21bZl0yP-In2g5p17sAQCfaGjyHx_QYMWTiQ/viewform?usp=pp_url&entry.189755027=Functional+Programming+%2F+From+Lists+to+Maps+%2F+Exercise1
status: Unchecked
record: -1
